{"id":"../node_modules/markdown-it/lib/rules_inline/backticks.js","dependencies":[{"name":"E:\\个人\\前端学习\\SortAlgorithm\\package.json","includedInParent":true,"mtime":1635478569023},{"name":"E:\\个人\\前端学习\\SortAlgorithm\\node_modules\\markdown-it\\package.json","includedInParent":true,"mtime":1635478463369}],"generated":{"js":"// Parse backticks\n\n'use strict';\n\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n  openerLength = marker.length;\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n  }\n\n  matchStart = matchEnd = pos;\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    closerLength = matchEnd - matchStart;\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        token     = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart;\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true;\n\n  if (!silent) state.pending += marker;\n  state.pos += openerLength;\n  return true;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/markdown-it/lib/rules_inline/backticks.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}}],"sources":{"../node_modules/markdown-it/lib/rules_inline/backticks.js":"// Parse backticks\n\n'use strict';\n\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n  openerLength = marker.length;\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n  }\n\n  matchStart = matchEnd = pos;\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    closerLength = matchEnd - matchStart;\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        token     = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart;\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true;\n\n  if (!silent) state.pending += marker;\n  state.pos += openerLength;\n  return true;\n};\n"},"lineCount":64}},"error":null,"hash":"d9928b90de720a6e81f012ef8ad67056","cacheData":{"env":{}}}